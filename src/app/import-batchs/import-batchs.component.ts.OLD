import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';
import { MatSort } from '@angular/material/sort';
import { MatPaginator } from '@angular/material/paginator';
import { TranslateService } from '@ngx-translate/core';
import { catchError, map, startWith, switchMap, tap } from 'rxjs/operators';
import { merge, of } from 'rxjs';

// Services
import { BatchQuery, BatchsService } from '../shared/batchs.service';
import { MessagesService } from '../core/messages.service';
import { PaginatedDataSource } from '../shared/datasource/datasource.component';
// Models
import { Batch } from '../models/batch.model';

@Component({
  selector: 'app-import-batchs',
  templateUrl: './import-batchs.component.html',
  styleUrls: ['./import-batchs.component.scss']
})
export class ImportBatchsComponent implements OnInit, AfterViewInit {

  // Variables
  public tz = 'UTC';

  // Variables para la tabla a mostrar
  // localPricesData: ProductLocalPriceModel[];
  public columnsToDisplay = [
    'channelName',
    'firstEvent',
    'lastEvent',
    'totalEvents',
    'createdAt'
  ];
  public batchsTable = new PaginatedDataSource<Batch, BatchQuery>(
    (request, query) => this.batchsService.getPage(request, query),
    {property: 'createdAt', order: 'desc'},
    {search: 'channelName'},
    2
  );
  public isLoadingResults: boolean;
  public recsPerPage = 2;
  public totalRows = 0;

  // HTML element para ordenar la tabla (sort)
  @ViewChild(MatSort) sort: MatSort;
  @ViewChild(MatPaginator) paginator: MatPaginator;

  constructor(
    private batchsService: BatchsService,
    private messagesService: MessagesService,
    private translate: TranslateService
  ) { }

  ngOnInit(): void {
    // Set default language (set in this place because of the F5: refresh)
    this.translate.use(this.messagesService.defaultLanguage);

    // Print program title
    this.translate.get('importBatchs.TITLE').subscribe( text => {
      this.messagesService.changeProgramTitle(text);
    });

    // Get the total batchs in the DBase
    this.batchsService.getTotalBatchs().subscribe(
      data => this.totalRows = data
    );
  }

  ngAfterViewInit(): void {

    // If the user changes the sort order, reset back to the first page.
    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);

    // Based on changes in sort or pagination, get new data
    merge(this.sort.sortChange, this.paginator.page)
    .pipe(
      startWith({}),
      switchMap(() => {
        this.isLoadingResults = true;
        this.recsPerPage = this.paginator.pageSize;
        console.log('***');
        console.log('*** params:', this.sort.active, this.sort.direction, this.paginator.pageIndex);
        console.log('*** paginator:', this.paginator.pageIndex, this.paginator.pageSize, this.paginator.length);

        return this.batchsService.getPage({
          sortField: this.sort.active,
          sortDirection: this.sort.direction,
          pageIndex: this.paginator.pageIndex,
          recsPerPage: this.recsPerPage
        });
      }),
      map(data => {
        this.isLoadingResults = false;
        console.log('*** totalRows:', this.totalRows, this.paginator.length);
        return data;
      }),
      catchError(error => {
        this.isLoadingResults = false;
        this.messagesService.changeErrorMessage(error.message);
        return of([]);
      })
    ).subscribe(batchs => {
      this.batchsTable = batchs;
    });
  }

}
